// tsconfig.app.json
{
  "compilerOptions": {
    // Позволяет использовать дефолтный импорт для модулей, которые не поддерживают ES-модули.
    "allowSyntheticDefaultImports": true,


    // Путь для хранения служебного файла инкрементальной сборки (ускоряет повторные компиляции).
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",


    // Устанавливает целевую версию JavaScript, в которую компилируется твой код.
    "target": "ES2020",


    // Использует спецификацию полей классов (синтаксис и семантика) согласно стандарту ECMAScript.
    "useDefineForClassFields": true,


    // Подключает стандартные библиотеки (доступные глобальные типы и API).
    "lib": ["ES2020", "DOM", "DOM.Iterable"],


    // Задаёт формат модулей (ESNext означает, что компилятор оставит импорт/экспорт без изменений).
    "module": "ESNext",


    // Пропускает проверку типов внутри файлов объявлений (`.d.ts`) библиотек.
    "skipLibCheck": true,


    /* Настройки для бандлеров (Vite/Webpack) */


    // Определяет, как TypeScript ищет модули. "node" использует логику Node.js.
    "moduleResolution": "node",


    // Настройка псевдонимов (alias), чтобы использовать более короткие пути для импорта.
    "paths": {
      "@/*": ["./src/*"]
    },


    // Позволяет импортировать файлы с расширениями `.ts` и `.tsx` явно в коде.
    "allowImportingTsExtensions": true,


    // Указывает, что каждый файл рассматривается изолированно (необходимое требование для бандлеров).
    "isolatedModules": true,


    // Запрещает генерацию JavaScript-файлов компилятором TypeScript (используется, когда сборка JS происходит отдельным инструментом, например Vite или Webpack).
    "noEmit": true,


    // Использует новую JSX-трансформацию React без необходимости импорта React явно в каждом файле.
    "jsx": "react-jsx",


    /* Настройки линтинга и контроля качества кода */


    // Включает строгий режим (максимальный уровень проверок, включая обязательность типов).
    "strict": true,


    // Запрещает наличие неиспользуемых локальных переменных.
    "noUnusedLocals": true,


    // Запрещает наличие неиспользуемых параметров функций.
    "noUnusedParameters": true,


    // Предупреждает об отсутствии `break` или `return` в блоках switch.
    "noFallthroughCasesInSwitch": true,


    // Запрещает импорты, которые не используются явно в коде и могут иметь побочные эффекты (например, CSS-файлы или полифиллы).
    "noUncheckedSideEffectImports": true
  },


  // Указывает файлы и папки, которые компилятор должен включить в проект для проверки.
  "include": [
    "src",                            // Вся папка src.
    "./src/**/*.ts",                  // Все файлы с расширением .ts внутри src.
    "./src/**/*.tsx",                 // Все файлы с расширением .tsx внутри src.
    "./src/app/types/global.d.ts",    // Глобальные определения типов.
    "vite.config.ts"                  // Файл конфигурации Vite.
  ]
}





